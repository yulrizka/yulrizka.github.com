<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on </title>
    <link>https://labs.yulrizka.com/tags/golang/</link>
    <description>Recent content in golang on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 25 Apr 2020 15:47:49 +0200</lastBuildDate><atom:link href="https://labs.yulrizka.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why for-range behaves differently depending on the size of the element (A peek into go compiler optimization)</title>
      <link>https://labs.yulrizka.com/en/why-for-range-behave-differently-depending-on-the-size-of-the-element/</link>
      <pubDate>Sat, 25 Apr 2020 15:47:49 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/en/why-for-range-behave-differently-depending-on-the-size-of-the-element/</guid>
      <description>It&amp;rsquo;s all started when my colleague asked this question.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  package main import &amp;#34;testing&amp;#34; const size = 1000000 type SomeStruct struct { ID0 int64 ID1 int64 ID2 int64 ID3 int64 ID4 int64 ID5 int64 ID6 int64 ID7 int64 ID8 int64 } func BenchmarkForVar(b *testing.</description>
    </item>
    
  </channel>
</rss>
