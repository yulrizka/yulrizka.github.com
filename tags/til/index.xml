<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>til on </title>
    <link>https://labs.yulrizka.com/tags/til/</link>
    <description>Recent content in til on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Sep 2020 13:28:16 +0200</lastBuildDate><atom:link href="https://labs.yulrizka.com/tags/til/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Push Only Current Branch</title>
      <link>https://labs.yulrizka.com/til/git/push-only-current-branch/</link>
      <pubDate>Thu, 17 Sep 2020 13:28:16 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/push-only-current-branch/</guid>
      <description>Git has multiple strategy whey you do git push
Before git 2.0, it was matching meaning that it will push all the local branch that has the same name as remote. I don&amp;rsquo;t like this because most of the time i just want to push my current branch and avoid mistakenly local branches that is not ready to be push yet.
After 2.0 it changes to simple it will push the current branch to upstream with added safety so that it will refuse to push if the upstream branch name is different from the local one.</description>
    </item>
    
    <item>
      <title>Checkout Last Branch</title>
      <link>https://labs.yulrizka.com/til/git/checkout-last-branch/</link>
      <pubDate>Mon, 16 Mar 2020 14:44:17 +0100</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/checkout-last-branch/</guid>
      <description>Sometimes you are checking out mutltiple different git branches and want to navigate back to previous branch.
You can use git checkout - to do it
example :
1 2 3 4 5 6 7 8  $ git checkout ay/convert-errors-lib Updating files: 100% (2480/2480), done. Switched to branch &amp;#39;ay/convert-errors-lib&amp;#39; $ git checkout - Updating files: 100% (2480/2480), done. Switched to branch &amp;#39;master&amp;#39; Your branch is up to date with &amp;#39;origin/master&amp;#39;.</description>
    </item>
    
    <item>
      <title>pandas - format custom date in data frame</title>
      <link>https://labs.yulrizka.com/til/analytics/pandas-format-custom-date-in-data-frame/</link>
      <pubDate>Tue, 07 Jun 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/analytics/pandas-format-custom-date-in-data-frame/</guid>
      <description>say you have a data frame like this
[ {foo: 1, created_date:&amp;quot;2016-06-04 03:00:01.727&amp;quot;}, ... ] the timestamp doesn&amp;rsquo;t recognize immediately. To make this field as timestamp and as index we could do
1 2 3  # assuming df contains the data frame df[&amp;#39;timestamp&amp;#39;] = pd.to_datetime(be.timestamp, format=&amp;#34;%Y-%m-%d%H:%M:%S.%f&amp;#34;) df.set_index(df[&amp;#39;timestamp&amp;#39;], inplace=True)   </description>
    </item>
    
    <item>
      <title>worktree - switching branch without stash</title>
      <link>https://labs.yulrizka.com/til/git/worktree-switching-branch-without-stash/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/worktree-switching-branch-without-stash/</guid>
      <description>Some times you are working on some feature but then you need to check or fix something on some other branch. The normal way to do it is that we do:
 git stash switch to other branch commit changes swith to previous branch git stash pop  This can be complicated especially you have multiple stash. You can&amp;rsquo;t easily understand which stash belongs where.
After version 2.5.2 there is new command called git worktree</description>
    </item>
    
  </channel>
</rss>
