<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>til linux on </title>
    <link>https://labs.yulrizka.com/tags/til-linux/</link>
    <description>Recent content in til linux on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 24 Oct 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://labs.yulrizka.com/tags/til-linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>zfs external backup drive with snapshot and encryption</title>
      <link>https://labs.yulrizka.com/til/linux/zfs-external-backup-drive-with-snapshot-and-encryption/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/linux/zfs-external-backup-drive-with-snapshot-and-encryption/</guid>
      <description>main source
Get device id $ ls /dev/disk/by-id -alh ... lrwxrwxrwx 1 root root 10 okt 24 06:06 ata-WDC_WD10EZEX-08M2NA0_WD-WMC3F1471486-part4 -&amp;gt; ../../sda4 ...  For example, I&amp;rsquo;m going to use /dev/disk/by-id/ata-WDC_WD10EZEX-08M2NA0_WD-WMC3F1471486-part4
Setup disk encryption with LUKS setup LuKS
$ sudo apt install cryptsetup $ cryptsetup luksFormat --cipher aes-xts-plain64 --key-size 512 --iter-time 10000 --use-random -y /dev/disk/by-id/ata-WDC_WD10EZEX-08M2NA0_WD-WMC3F1471486-part4   --cipher encryption algorithm --key-size encryption key size --iter-time Number of millisecond to spend P8KDF passphrase processing --use-random use /dev/random -y verify passphrase  Disk device can now be opened.</description>
    </item>
    
    <item>
      <title>connect bluetooth device from cli</title>
      <link>https://labs.yulrizka.com/til/linux/connect-bluetooth-device-from-cli/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/linux/connect-bluetooth-device-from-cli/</guid>
      <description>We use bluetoothctl tool which is command-line to BlueZ
$ sudo bluetoothctl  Enable authentication agent
[bluetooth]# agent on  Run the scan process
[bluetooth]# scan on  Pair with the device
[bluetooth]# pair 00:25:56:D1:36:6B  Connect to the device
[bluetooth]# connect 00:25:56:D1:36:6B  more information https://docs.ubuntu.com/core/en/stacks/bluetooth/bluez/docs/reference/pairing/outbound</description>
    </item>
    
    <item>
      <title>get full argument from a process</title>
      <link>https://labs.yulrizka.com/til/linux/get-full-argument-from-a-process/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/linux/get-full-argument-from-a-process/</guid>
      <description>We can find it out by using ps. For example
$ ps aux | grep cassandra ... cassand+ 24615 40.5 41.9 12064088 5033964 ? SLl 14:28 5:15 java -ea -javaagent:/usr/share/cassandra/lib/jamm-0.3.0.jar -XX:+CMSClassUnloadingEnabled -XX:+UseThreadPriorities -XX:ThreadPriorityPolicy=42 -Xms4096M -Xmx4096M -Xmn1024M -XX:+PreserveFramePointer -Xss256k -XX:StringTableSize=1000003 -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:SurvivorRatio=2 -XX:MaxTenuringThreshold=15 -XX:CMSInitiatingOccupancyFraction=25 -XX:+UseCMSInitiatingOccupancyOnly -XX:+UseTLAB -XX:CompileCommandFile=/etc/cassandra/hotspot_compiler -XX:+ScavengeBeforeFullGC -XX:+CMSScavengeBeforeRemark -XX:+UnlockDiagnosticVMOptions -XX:-UseBiasedLocking -XX:+UseGCTaskAffinity -XX:+BindGCTaskThreadsToCPUs -XX:ConcGCThreads=16 -XX:ParallelGCThreads=16 -XX:ParGCCardsPerStrideChunk=4096 -XX:+ParallelRefProcEnabled -XX:CMSMaxAbortablePrecleanTime=60000 -XX:CMSWaitDuration=30000 -XX:+AlwaysPreTouch -XX:+UseTLAB -XX:+ResizeTLAB -Dcassandra.max_local_pause_in_ms=40000 -XX:+CMSParallelInitialMarkEnabled -XX:+CMSEdenChunksRecordAlways -XX:+UseCondCardMark -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintPromotionFailure -XX:PrintFLSStatistics=1 -XX:+PrintAdaptiveSizePolicy -XX:+PrintSafepointStatistics -XX:+PrintClassHistogramBeforeFullGC -XX:+PrintClassHistogramAfterFullGC -Xloggc:/var/log/cassandra/gc.</description>
    </item>
    
    <item>
      <title>clearing up swap space</title>
      <link>https://labs.yulrizka.com/til/linux/clearing-up-swap-space/</link>
      <pubDate>Wed, 15 Jun 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/linux/clearing-up-swap-space/</guid>
      <description>WARNING: make sure the memory is enough to put the data back from swap, else system will start killing processes
To clear up swap space (put the data back into memory) we can do
# swapoff -a &amp;amp;&amp;amp; swapon -a  Because this is quite slow process, it&amp;rsquo;s a good idea to run this inside screen session.</description>
    </item>
    
    <item>
      <title>symbolic vs hard link</title>
      <link>https://labs.yulrizka.com/til/linux/symbolic-vs-hard-link/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/linux/symbolic-vs-hard-link/</guid>
      <description>from http://stackoverflow.com/a/185903/546750
 Underneath the file system files are represented by inodes (or is it multiple inodes not sure)
A file in the file system is basically a link to an inode. A hard link then just creates another file with a link to the same underlying inode.
When you delete a file it removes one link to the underlying inode. The inode is only deleted (or deletable/over-writable) when all links to the inode have been deleted.</description>
    </item>
    
    <item>
      <title>Removing old kernel</title>
      <link>https://labs.yulrizka.com/til/linux/removing-old-kernel/</link>
      <pubDate>Sat, 12 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/linux/removing-old-kernel/</guid>
      <description>When upgrading ubuntu, sometimes it failed because of insufficient disk on boot. This could be caused by too many kernel installed on the machine.
Command to remove old kernel from here
dpkg --list | grep linux-image | awk &#39;{ print $2 }&#39; | sort -V | sed -n &#39;/&#39;`uname -r`&#39;/q;p&#39; | xargs sudo apt-get -y purge  dpkg &amp;ndash;list | grep linux-image | awk &amp;lsquo;{ print $2 }&amp;rsquo; | sort -V | sed -n &amp;lsquo;/&amp;rsquo;uname -r&amp;rsquo;/q;p&amp;rsquo; | xargs sudo apt-get -y purgenation (remember, | uses the output of the previous command as the input to the next)</description>
    </item>
    
  </channel>
</rss>