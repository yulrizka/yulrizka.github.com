<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>til unix cli on </title>
    <link>https://labs.yulrizka.com/tags/til-unix-cli/</link>
    <description>Recent content in til unix cli on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 16 Aug 2016 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://labs.yulrizka.com/tags/til-unix-cli/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>parsing epoch timestamp to date</title>
      <link>https://labs.yulrizka.com/til/unix/parsing-epoch-timestamp-to-date/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/parsing-epoch-timestamp-to-date/</guid>
      <description>To get current unix timestamp we can do
$ date +%s 1471365644 But how do we parse a file which contain epoch timestamp to date?
$ echo 1471365644 | perl -pe &#39;s/(\d+)/localtime($1)/e&#39; if we have it in milliseconds, we could remove the milliseconds part with
$ echo 1471365644000 | cut -c -10 | perl -pe &#39;s/(\d+)/localtime($1)/e&#39; Tue Aug 16 18:40:44 2016 Assuming your epoch seconds is 10 character. But if you have more or less, you need to do some other string processing first</description>
    </item>
    
    <item>
      <title>repeat content of text x time</title>
      <link>https://labs.yulrizka.com/til/unix/repeat-content-of-text-x-time/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/repeat-content-of-text-x-time/</guid>
      <description>I have a use-case where 1 have single file that contain 20K line. I need to have another file with 1 million line with just content of the first file repeated 50 time.
Solution: form stack overflow
$ perl -0777pe &#39;$_=$_ x 50&#39; input_file.txt &amp;gt; output_file.txt arguments:
 0777 : -0 sets sets the input record separator (perl special variable $/ which is a newline by default). Setting this to a value greater than 0400 will cause Perl to slurp the entire input file into memory.</description>
    </item>
    
    <item>
      <title>keep N recent item in folder</title>
      <link>https://labs.yulrizka.com/til/unix/keep-n-recent-item-in-folder/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/keep-n-recent-item-in-folder/</guid>
      <description>Sometimes you create a script that generate something but you wanted to only keep N last item. There is couple way to achive this. This version works both on OSX and Linux.
$ (ls -t|head -n 5;ls)|sort|uniq -u|xargs rm Basically it the (..) will capture together the output
 ls -t | head -n 5 will list files sort by time and get first 5 items The second ls will list all file.</description>
    </item>
    
    <item>
      <title>prompt confirmation in bash</title>
      <link>https://labs.yulrizka.com/til/unix/prompt-confirmation-in-bash/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/prompt-confirmation-in-bash/</guid>
      <description>From http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
1 2 3 4 5 6  read -p &amp;#34;Are you sure? &amp;#34; -n 1 -r echo # (optional) move to a new line if [[ ! $REPLY =~ ^[Yy]$ ]] then exit 1 fi   </description>
    </item>
    
    <item>
      <title>Reusing last command arguments</title>
      <link>https://labs.yulrizka.com/til/unix/reusing-last-command-argument/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/reusing-last-command-argument/</guid>
      <description>1 2 3 4 5 6 7 8 9 10  $ echo 1 1 $ echo 2 2 $ echo 3 3 $ echo 4 4 $ echo 5 5   use alt + . will reuse the last program argument in descending order
$ echo (press alt + .) $ echo 5 (press alt + . again) $ echo 4 (press alt + . again) ... selective arguments  !</description>
    </item>
    
    <item>
      <title>process pipe operator</title>
      <link>https://labs.yulrizka.com/til/unix/process-pipe-operator/</link>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/process-pipe-operator/</guid>
      <description>&amp;lt;( ) operator executes command inside the parenthesis and output the file descriptor
example
1 2 3 4 5 6 7 8 9 10 11 12 13  $ cat &amp;lt;(echo &amp;#39;hello&amp;#39;) &amp;lt;(echo &amp;#39;world&amp;#39;) hello world # is practically the same with $ echo &amp;#39;hello&amp;#39; &amp;gt; 1.txt $ echo &amp;#39;world&amp;#39; &amp;gt; 2.txt $ cat 1.txt 2.txt # replace cat with ls $ ls &amp;lt;(echo &amp;#39;hello&amp;#39;) &amp;lt;(echo &amp;#39;world&amp;#39;) /proc/self/fd/11 /proc/self/fd/12   you can use this command for example to compare 2 directory and find only uniq file</description>
    </item>
    
  </channel>
</rss>