<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://labs.yulrizka.com/til/unix/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Sep 2019 16:26:08 +0200</lastBuildDate>
    
	<atom:link href="https://labs.yulrizka.com/til/unix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Zsh Ctrl P Same Behavior as Up Arrow</title>
      <link>https://labs.yulrizka.com/til/unix/zsh-ctrl-p-same-behavior-as-up-arrow/</link>
      <pubDate>Fri, 13 Sep 2019 16:26:08 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/zsh-ctrl-p-same-behavior-as-up-arrow/</guid>
      <description>By default Ctrl-P just jump back to the history while up arrow behave a little bit smarter.
For example if you have history like this
ssh a.com ls cd ssh b.com cat grep  Normaly if you type $ ssh and Ctrl-P afterwares, it will give you grep not ssh b.com
to change this behavior, you can put this in your .zshrc
bindkey &amp;quot;^P&amp;quot; up-line-or-search bindkey &amp;quot;^N&amp;quot; down-line-or-search  </description>
    </item>
    
    <item>
      <title>extend letsencrypt certificate with DNS challenge</title>
      <link>https://labs.yulrizka.com/til/unix/extend-letsencrypt-certificate-with-dns-challenge/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/extend-letsencrypt-certificate-with-dns-challenge/</guid>
      <description>Assuming the domain name is yulrizka.com and the certificate was created with
$ certbot certonly --standalone --preferred-challenges dns -d yulrizka.com  To extend this certificate with DNS challenge
# certbot -d home.yulrizka.com --manual --preferred-challenges dns certonly  You will be asked to add TXT record of _acme-challenge.yulrizka.com.
After updating that DNS record, wait couple of minutes and proceed.</description>
    </item>
    
    <item>
      <title>rename tmux window</title>
      <link>https://labs.yulrizka.com/til/unix/rename-tmux-window/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/rename-tmux-window/</guid>
      <description>C-a A  That&amp;rsquo;s Control-a A</description>
    </item>
    
    <item>
      <title>encription with gpg</title>
      <link>https://labs.yulrizka.com/til/unix/encription-with-gpg/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/encription-with-gpg/</guid>
      <description>Generate key gpg --gen-key  List keys gpg --list-keys  Encrypt Data With a passprhare
gpg -ca -o output.txt.gpg input.txt  with a certificate and from STDOUT
gpg -ea  or if you know the name already (can be key, name or email)
gpg -ea -r &amp;quot;Ahmy&amp;quot;  Decrypt Data gpg -d file.txt.gpg  Export Public key
gpg --export -a &amp;quot;name&amp;quot; &amp;gt; public.key  -a is to create armored ascii output.</description>
    </item>
    
    <item>
      <title>diff output of 2 command</title>
      <link>https://labs.yulrizka.com/til/unix/diff-output-of-2-command/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/diff-output-of-2-command/</guid>
      <description>for example, I want to compare output of 2 different curl comand
$ diff &amp;lt;(curl -s http://host.com/a) &amp;lt;(curl -s http://anotherhost.com/a)  </description>
    </item>
    
    <item>
      <title>sending curl POST with file</title>
      <link>https://labs.yulrizka.com/til/unix/sending-curl-post-with-file/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/sending-curl-post-with-file/</guid>
      <description>curl -X POST -d @myfilename http://www.url.com `` or `` curl -XPOST &#39;localhost:9200/bank/_search?pretty&#39; -d &#39; { &amp;quot;query&amp;quot;: { &amp;quot;match_phrase&amp;quot;: { &amp;quot;address&amp;quot;: &amp;quot;mill lane&amp;quot; } } }&#39;  </description>
    </item>
    
    <item>
      <title>jq extracting properties to arrays from JSON row line</title>
      <link>https://labs.yulrizka.com/til/unix/jq-extracting-properties-to-arrays-from-json-row-line/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/jq-extracting-properties-to-arrays-from-json-row-line/</guid>
      <description>For example if we have a file that contains JSON object like
{&amp;quot;a&amp;quot;: 1, &amp;quot;b&amp;quot;:{&amp;quot;c&amp;quot;: 11} {&amp;quot;a&amp;quot;: 2, &amp;quot;b&amp;quot;:{&amp;quot;c&amp;quot;: 22}} {&amp;quot;a&amp;quot;: 3, &amp;quot;b&amp;quot;:{&amp;quot;c&amp;quot;: 33}}  And you want to construct something like
[&amp;quot;1&amp;quot;, &amp;quot;11&amp;quot;] [&amp;quot;2&amp;quot;, &amp;quot;22&amp;quot;] [&amp;quot;3&amp;quot;, &amp;quot;33&amp;quot;]  You can do that with jq
$ cat filename.json | jq -c &#39;[.a, .b.c]&#39;  this is particularly usefull to grep something from JSON log</description>
    </item>
    
    <item>
      <title>parsing epoch timestamp to date</title>
      <link>https://labs.yulrizka.com/til/unix/parsing-epoch-timestamp-to-date/</link>
      <pubDate>Tue, 16 Aug 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/parsing-epoch-timestamp-to-date/</guid>
      <description>To get current unix timestamp we can do
$ date +%s 1471365644  But how do we parse a file which contain epoch timestamp to date?
$ echo 1471365644 | perl -pe &#39;s/(\d+)/localtime($1)/e&#39;  if we have it in milliseconds, we could remove the milliseconds part with
$ echo 1471365644000 | cut -c -10 | perl -pe &#39;s/(\d+)/localtime($1)/e&#39; Tue Aug 16 18:40:44 2016  Assuming your epoch seconds is 10 character.</description>
    </item>
    
    <item>
      <title>repeat content of text x time</title>
      <link>https://labs.yulrizka.com/til/unix/repeat-content-of-text-x-time/</link>
      <pubDate>Mon, 15 Aug 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/repeat-content-of-text-x-time/</guid>
      <description>I have a use-case where 1 have single file that contain 20K line. I need to have another file with 1 million line with just content of the first file repeated 50 time.
Solution: form stack overflow
$ perl -0777pe &#39;$_=$_ x 50&#39; input_file.txt &amp;gt; output_file.txt  arguments:
 0777 : -0 sets sets the input record separator (perl special variable $/ which is a newline by default). Setting this to a value greater than 0400 will cause Perl to slurp the entire input file into memory.</description>
    </item>
    
    <item>
      <title>bulk renaming multiple file</title>
      <link>https://labs.yulrizka.com/til/unix/bulk-renaming-multiple-file/</link>
      <pubDate>Tue, 12 Jul 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/bulk-renaming-multiple-file/</guid>
      <description>There are couple of way to rename multiple files.
From http://unix.stackexchange.com/questions/1136/batch-renaming-files
example we have files
image0001.png image0002.png image0003.png ...  And we would like to rename it to
0001.png 0002.png 0003.png ...  with for loop this works with linux and mac without installing anything
1  for f in *.png; do mv &amp;#34;$f&amp;#34; &amp;#34;${f#image}&amp;#34;; done   With ZSH This is my favorite way since I&amp;rsquo;m using ZSH and oh-my-zsh.</description>
    </item>
    
    <item>
      <title>specify compression level in tar gzip</title>
      <link>https://labs.yulrizka.com/til/unix/specify-compression-level-in-tar-gzip/</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/specify-compression-level-in-tar-gzip/</guid>
      <description>from http://superuser.com/questions/305128/how-to-specify-level-of-compression-when-using-tar-zcvf
GZIP=-9 tar cvzf file.tar.gz /path/to/directory  or
tar cvf - /path/to/file0 /path/to/file1 | gzip -9 - &amp;gt; files.tar.gz  </description>
    </item>
    
    <item>
      <title>file size older than x days</title>
      <link>https://labs.yulrizka.com/til/unix/file-size-older-than-x-days/</link>
      <pubDate>Mon, 06 Jun 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/file-size-older-than-x-days/</guid>
      <description>from http://stackoverflow.com/a/17419690/546750
to list all file that modified more than more than X days, we can use
$ find . -mtime +[number of days]  if you use - sign than it became file is modified since X days
Combine it with akw, we can get total file size
$ find . -mtime +180 -exec du -ks {} \; | cut -f1 | awk &#39;{total=total+$1}END{print total/1024}&#39;  </description>
    </item>
    
    <item>
      <title>filtering json with jq</title>
      <link>https://labs.yulrizka.com/til/unix/filtering-json-with-jq/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/filtering-json-with-jq/</guid>
      <description>jq is a fantastic command line tools to parse and filter json in command line. It works for linux, osx and maybe windows.
example, to format json
$ json=&#39;[{&amp;quot;genre&amp;quot;:&amp;quot;deep house&amp;quot;}, {&amp;quot;genre&amp;quot;: &amp;quot;progressive house&amp;quot;}, {&amp;quot;genre&amp;quot;: &amp;quot;dubstep&amp;quot;}]&#39; $ echo $json [{&amp;quot;genre&amp;quot;:&amp;quot;deep house&amp;quot;}, {&amp;quot;genre&amp;quot;: &amp;quot;progressive house&amp;quot;}, {&amp;quot;genre&amp;quot;: &amp;quot;dubstep&amp;quot;}] $ echo $json | jq . [ { &amp;quot;genre&amp;quot;: &amp;quot;deep house&amp;quot; }, { &amp;quot;genre&amp;quot;: &amp;quot;progressive house&amp;quot; }, { &amp;quot;genre&amp;quot;: &amp;quot;dubstep&amp;quot; } ]  To output a particular field</description>
    </item>
    
    <item>
      <title>keep N recent item in folder</title>
      <link>https://labs.yulrizka.com/til/unix/keep-n-recent-item-in-folder/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/keep-n-recent-item-in-folder/</guid>
      <description>Sometimes you create a script that generate something but you wanted to only keep N last item. There is couple way to achive this. This version works both on OSX and Linux.
$ (ls -t|head -n 5;ls)|sort|uniq -u|xargs rm  Basically it the (..) will capture together the output
 ls -t | head -n 5 will list files sort by time and get first 5 items The second ls will list all file.</description>
    </item>
    
    <item>
      <title>find out what is using swap</title>
      <link>https://labs.yulrizka.com/til/unix/find-out-what-is-using-swap/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/find-out-what-is-using-swap/</guid>
      <description>from http://northernmost.org/blog/find-out-what-is-using-your-swap/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #!/bin/bash # Get current swap usage for all running processes # Erik Ljungstrom 27/05/2011 SUM=0 OVERALL=0 for DIR in `find /proc/ -maxdepth 1 -type d | egrep &amp;#34;^/proc/[0-9]&amp;#34;` ; do PID=`echo $DIR | cut -d / -f 3` PROGNAME=`ps -p $PID -o comm --no-headers` for SWAP in `grep Swap $DIR/smaps 2&amp;gt;/dev/null| awk &amp;#39;{ print $2 }&amp;#39;` do let SUM=$SUM+$SWAP done echo &amp;#34;PID=$PID- Swap used: $SUM- ($PROGNAME)&amp;#34; let OVERALL=$OVERALL+$SUM SUM=0 done echo &amp;#34;Overall swap used: $OVERALL&amp;#34;  </description>
    </item>
    
    <item>
      <title>prompt confirmation in bash</title>
      <link>https://labs.yulrizka.com/til/unix/prompt-confirmation-in-bash/</link>
      <pubDate>Tue, 24 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/prompt-confirmation-in-bash/</guid>
      <description>From http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
1 2 3 4 5 6  read -p &amp;#34;Are you sure? &amp;#34; -n 1 -r echo # (optional) move to a new line if [[ ! $REPLY =~ ^[Yy]$ ]] then exit 1 fi  </description>
    </item>
    
    <item>
      <title>get all line except n last one</title>
      <link>https://labs.yulrizka.com/til/unix/get-all-line-except-n-last-one/</link>
      <pubDate>Wed, 18 May 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/get-all-line-except-n-last-one/</guid>
      <description>with head -n &amp;lt;negative number&amp;gt; we can get the output except n lines
example
cat a.txt | head -n -1  will gives as the content of a.txt except the last one
Let say we have file 1 2 3 4 5, and with grep we want to only get 1 2 3.
we can achive this with ls and grep
$ ls | grep 4 -B 100000000 | head -n -1  the -B show 100000000 lines before matched line, and the head -n -1 removes the matched</description>
    </item>
    
    <item>
      <title>Format or parse json in command line</title>
      <link>https://labs.yulrizka.com/til/unix/formatting-or-parse-json-in-command-line/</link>
      <pubDate>Thu, 17 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/formatting-or-parse-json-in-command-line/</guid>
      <description>To easily format json or command line there jq
example
$ echo &#39;{&amp;quot;user&amp;quot;:&amp;quot;stedolan&amp;quot;,&amp;quot;titles&amp;quot;:[&amp;quot;JQ Primer&amp;quot;, &amp;quot;More JQ&amp;quot;]}&#39; | jq . { &amp;quot;user&amp;quot;: &amp;quot;stedolan&amp;quot;, &amp;quot;titles&amp;quot;: [ &amp;quot;JQ Primer&amp;quot;, &amp;quot;More JQ&amp;quot; ] }  or just print specific value
$ echo &#39;{&amp;quot;user&amp;quot;:&amp;quot;stedolan&amp;quot;,&amp;quot;titles&amp;quot;:[&amp;quot;JQ Primer&amp;quot;, &amp;quot;More JQ&amp;quot;]}&#39; | jq .titles[0] &amp;quot;JQ Primer&amp;quot;  </description>
    </item>
    
    <item>
      <title>grep - print only matched</title>
      <link>https://labs.yulrizka.com/til/unix/grep-print-only-matched/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/grep-print-only-matched/</guid>
      <description>you can use the -o flag to only print matched value. Example
$ echo &amp;quot;Hello fellow unix fan&amp;quot; | grep --color -o nix nix $ echo &amp;quot;Hello fellow unix fan&amp;quot; | grep --color -o nux $ echo $? 1  </description>
    </item>
    
    <item>
      <title>send slack message from command line</title>
      <link>https://labs.yulrizka.com/til/unix/send-slack-message-from-command-line/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/send-slack-message-from-command-line/</guid>
      <description>Install Incomming webhook to your channel https://api.slack.com/incoming-webhooks#sending_messages
you will then get some url https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
create /usr/local/bin/notifyme
#!/bin/sh curl -X POST --data-urlencode &amp;quot;payload={\&amp;quot;channel\&amp;quot;: \&amp;quot;#alert\&amp;quot;, \&amp;quot;username\&amp;quot;: \&amp;quot;mybot\&amp;quot;, \&amp;quot;text\&amp;quot;: \&amp;quot;$*\&amp;quot;, \&amp;quot;icon_emoji\&amp;quot;: \&amp;quot;:name_badge:\&amp;quot;}&amp;quot; https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX  and send message via your command line
$ chmod +x /usr/local/bin/notifyme $ notifyme hello world! # or after some command $ sleep 5; notifyme process is finished  </description>
    </item>
    
    <item>
      <title>Reusing last command arguments</title>
      <link>https://labs.yulrizka.com/til/unix/reusing-last-command-argument/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/reusing-last-command-argument/</guid>
      <description>1 2 3 4 5 6 7 8 9 10  $ echo 1 1 $ echo 2 2 $ echo 3 3 $ echo 4 4 $ echo 5 5   use alt + . will reuse the last program argument in descending order
$ echo (press alt + .) $ echo 5 (press alt + . again) $ echo 4 (press alt + . again) ...  selective arguments  !</description>
    </item>
    
    <item>
      <title>pbcopy alternative for copying to clipboard</title>
      <link>https://labs.yulrizka.com/til/unix/pbcopy-alternative-for-copying-to-clipboard/</link>
      <pubDate>Sat, 13 Feb 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/pbcopy-alternative-for-copying-to-clipboard/</guid>
      <description>in osx we have pbcopy &amp;amp; pbpaste
we can have something similar in linux. Put this is your shell profile (~/.bashrc or ~/.zshrc if you are using zsh)
1 2  alias pbcopy=&amp;#39;xclip -selection clipboard&amp;#39; alias pbpaste=&amp;#39;xclip -selection clipboard -o&amp;#39;  </description>
    </item>
    
    <item>
      <title>process pipe operator</title>
      <link>https://labs.yulrizka.com/til/unix/process-pipe-operator/</link>
      <pubDate>Thu, 12 Feb 2015 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/unix/process-pipe-operator/</guid>
      <description>&amp;lt;( ) operator executes command inside the parenthesis and output the file descriptor
example
1 2 3 4 5 6 7 8 9 10 11 12 13  $ cat &amp;lt;(echo &amp;#39;hello&amp;#39;) &amp;lt;(echo &amp;#39;world&amp;#39;) hello world # is practically the same with $ echo &amp;#39;hello&amp;#39; &amp;gt; 1.txt $ echo &amp;#39;world&amp;#39; &amp;gt; 2.txt $ cat 1.txt 2.txt # replace cat with ls $ ls &amp;lt;(echo &amp;#39;hello&amp;#39;) &amp;lt;(echo &amp;#39;world&amp;#39;) /proc/self/fd/11 /proc/self/fd/12   you can use this command for example to compare 2 directory and find only uniq file</description>
    </item>
    
  </channel>
</rss>