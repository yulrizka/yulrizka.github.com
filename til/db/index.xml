<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://labs.yulrizka.com/til/db/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 02 Feb 2021 13:55:44 +0100</lastBuildDate><atom:link href="https://labs.yulrizka.com/til/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Postgres Naming Trigger</title>
      <link>https://labs.yulrizka.com/til/db/postgres-naming-trigger/</link>
      <pubDate>Tue, 02 Feb 2021 13:55:44 +0100</pubDate>
      
      <guid>https://labs.yulrizka.com/til/db/postgres-naming-trigger/</guid>
      <description>Taken From https://severalnines.com/database-blog/postgresql-triggers-and-stored-function-basics
Pattern [TBALE_NAME]_[FUNCITON NAME]_[WHEN][1 or more WHY][t]
When:
 b - Before a - After i - Instead of  WHY:
 i - Insert u - Update d - Delete t - Truncate  t = &amp;lsquo;trigger&amp;rsquo;
eg: my_table_update_ts_biut means it&amp;rsquo;s a trigger on my_table, triggers update_ts before insert &amp;amp; update
Reasoning: Just by looking at the trigger name, you know which table, and when it is triggered</description>
    </item>
    
    <item>
      <title>Postgres Audit Log Trigger</title>
      <link>https://labs.yulrizka.com/til/db/postgres-audit-log-trigger/</link>
      <pubDate>Tue, 02 Feb 2021 13:54:20 +0100</pubDate>
      
      <guid>https://labs.yulrizka.com/til/db/postgres-audit-log-trigger/</guid>
      <description>This triggers will log before and after fields for a table in JSON format.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  CREATE TABLE changelog ( id serial NOT NULL, ts timestamp DEFAULT NOW(), table_name text, operation text, new_val json, old_val json ); CREATE INDEX changelog_ts_table_name_index ON changelog (ts DESC, table_name ASC); CREATE OR REPLACE FUNCTION logchange() RETURNS trigger AS $$ BEGIN IF TG_OP = &amp;#39;INSERT&amp;#39; THEN INSERT INTO changelog (table_name, operation, new_val) VALUES (TG_RELNAME, TG_OP, ROW_TO_JSON(NEW)); RETURN NEW; ELSIF TG_OP = &amp;#39;UPDATE&amp;#39; THEN INSERT INTO changelog (table_name, operation, new_val, old_val) VALUES (TG_RELNAME, TG_OP, ROW_TO_JSON(NEW), ROW_TO_JSON(OLD)); RETURN NEW; ELSIF TG_OP = &amp;#39;DELETE&amp;#39; THEN INSERT INTO changelog (table_name, operation, old_val) VALUES (TG_RELNAME, TG_OP, ROW_TO_JSON(OLD)); RETURN OLD; END IF; END; $$ LANGUAGE &amp;#39;plpgsql&amp;#39; SECURITY DEFINER; CREATE TRIGGER users_changelog_biudt BEFORE INSERT OR UPDATE OR DELETE ON users FOR EACH ROW EXECUTE PROCEDURE logchange();   </description>
    </item>
    
  </channel>
</rss>
