<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://labs.yulrizka.com/til/git/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Oct 2020 11:16:55 +0200</lastBuildDate><atom:link href="https://labs.yulrizka.com/til/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intellij as git diff and mergetool</title>
      <link>https://labs.yulrizka.com/til/git/intellij-as-diff-and-mergetool/</link>
      <pubDate>Mon, 19 Oct 2020 11:16:55 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/intellij-as-diff-and-mergetool/</guid>
      <description>Setup idea script First, you need to set up idea script by following the instruction here
If you are using mac, make sure you add -W on the open script as follows (see this issue)
open -Wna &amp;quot;IntelliJ IDEA.app&amp;quot; --args &amp;quot;$@&amp;quot; setup git difftool &amp;amp; mergetool Taken from https://gist.github.com/rambabusaravanan/1d1902e599c9c680319678b0f7650898#gistcomment-2132894
open .git/config (or your global gitconfig file)
1 2 3 4 5 6 7 8 9 10  [merge] tool = intellij [mergetool &amp;#34;intellij&amp;#34;] cmd = idea merge $(cd $(dirname &amp;#34;$LOCAL&amp;#34;) &amp;amp;&amp;amp; pwd)/$(basename &amp;#34;$LOCAL&amp;#34;) $(cd $(dirname &amp;#34;$REMOTE&amp;#34;) &amp;amp;&amp;amp; pwd)/$(basename &amp;#34;$REMOTE&amp;#34;) $(cd $(dirname &amp;#34;$BASE&amp;#34;) &amp;amp;&amp;amp; pwd)/$(basename &amp;#34;$BASE&amp;#34;) $(cd $(dirname &amp;#34;$MERGED&amp;#34;) &amp;amp;&amp;amp; pwd)/$(basename &amp;#34;$MERGED&amp;#34;) trustExitCode = true [diff] tool = intellij [difftool &amp;#34;intellij&amp;#34;] cmd = idea diff $(cd $(dirname &amp;#34;$LOCAL&amp;#34;) &amp;amp;&amp;amp; pwd)/$(basename &amp;#34;$LOCAL&amp;#34;) $(cd $(dirname &amp;#34;$REMOTE&amp;#34;) &amp;amp;&amp;amp; pwd)/$(basename &amp;#34;$REMOTE&amp;#34;)   Explanation about LOCAL, REMOTE, BASE from stackoverflow</description>
    </item>
    
    <item>
      <title>Global Gitignore File</title>
      <link>https://labs.yulrizka.com/til/git/global-gitignore-file/</link>
      <pubDate>Tue, 29 Sep 2020 09:37:31 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/global-gitignore-file/</guid>
      <description>To create a global git ignore that apply across all git repository
$ echo `.DS_Store` &amp;gt; ~/.gitignore $ git config --global core.excludesfile ~/.gitignore </description>
    </item>
    
    <item>
      <title>Push Only Current Branch</title>
      <link>https://labs.yulrizka.com/til/git/push-only-current-branch/</link>
      <pubDate>Thu, 17 Sep 2020 13:28:16 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/push-only-current-branch/</guid>
      <description>Git has multiple strategy whey you do git push
Before git 2.0, it was matching meaning that it will push all the local branch that has the same name as remote. I don&amp;rsquo;t like this because most of the time i just want to push my current branch and avoid mistakenly local branches that is not ready to be push yet.
After 2.0 it changes to simple it will push the current branch to upstream with added safety so that it will refuse to push if the upstream branch name is different from the local one.</description>
    </item>
    
    <item>
      <title>Checkout Last Branch</title>
      <link>https://labs.yulrizka.com/til/git/checkout-last-branch/</link>
      <pubDate>Mon, 16 Mar 2020 14:44:17 +0100</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/checkout-last-branch/</guid>
      <description>Sometimes you are checking out mutltiple different git branches and want to navigate back to previous branch.
You can use git checkout - to do it
example :
1 2 3 4 5 6 7 8  $ git checkout ay/convert-errors-lib Updating files: 100% (2480/2480), done. Switched to branch &amp;#39;ay/convert-errors-lib&amp;#39; $ git checkout - Updating files: 100% (2480/2480), done. Switched to branch &amp;#39;master&amp;#39; Your branch is up to date with &amp;#39;origin/master&amp;#39;.</description>
    </item>
    
    <item>
      <title>reset email multiple git commit</title>
      <link>https://labs.yulrizka.com/til/git/reset-email-multiple-commit/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/reset-email-multiple-commit/</guid>
      <description>I started not to use my real email for git commit. Instead i uses the one that is provided by github
After enabling Block command line pushes that expose my email on Block command line pushes that expose my email, it will reject all email that exposes public email adress.
So in order to rewrite git history and change the author email, I found this github help
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!</description>
    </item>
    
    <item>
      <title>git mergetool and diff with p4merge</title>
      <link>https://labs.yulrizka.com/til/git/git-mergetool-and-diff-with-p4merge/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/git-mergetool-and-diff-with-p4merge/</guid>
      <description>Some time you want visually merge conflict in git. To use p4merge https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge
git mergetool Linux $ git config --global merge.tool p4mergetool $ git config --global mergetool.p4mergetool.cmd \ $ &amp;quot;/opt/p4v/bin/p4merge \$PWD/\$BASE \$PWD/\$REMOTE \$PWD/\$LOCAL \$PWD/\$MERGED&amp;quot; $ git config --global mergetool.p4mergetool.trustExitCode false $ git config --global mergetool.keepBackup false Mac $ git config --global merge.tool p4mergetool $ git config --global mergetool.p4mergetool.cmd \ &amp;quot;/Applications/p4merge.app/Contents/Resources/launchp4merge \$PWD/\$BASE \$PWD/\$REMOTE \$PWD/\$LOCAL \$PWD/\$MERGED&amp;quot; $ git config --global mergetool.p4mergetool.trustExitCode false $ git config --global mergetool.</description>
    </item>
    
    <item>
      <title>worktree - switching branch without stash</title>
      <link>https://labs.yulrizka.com/til/git/worktree-switching-branch-without-stash/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/git/worktree-switching-branch-without-stash/</guid>
      <description>Some times you are working on some feature but then you need to check or fix something on some other branch. The normal way to do it is that we do:
 git stash switch to other branch commit changes swith to previous branch git stash pop  This can be complicated especially you have multiple stash. You can&amp;rsquo;t easily understand which stash belongs where.
After version 2.5.2 there is new command called git worktree</description>
    </item>
    
  </channel>
</rss>
