<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://labs.yulrizka.com/til/go/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Mar 2016 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://labs.yulrizka.com/til/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Default math.rand.Source is thread save while rand.New(Source) is not</title>
      <link>https://labs.yulrizka.com/til/go/default-math.rand.source-is-thread-save-while-rand.newsource-is-not/</link>
      <pubDate>Sun, 13 Mar 2016 00:00:00 +0200</pubDate>
      
      <guid>https://labs.yulrizka.com/til/go/default-math.rand.source-is-thread-save-while-rand.newsource-is-not/</guid>
      <description>Default pacakge rand uses Source that is thread safe with default seed 1
we can use the pacakge&amp;rsquo;s method to have thread safe random number generation
1 2 3 4 5 6 7 8 9 10 11 12 13  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;time&amp;#34; ) func main() { seed := time.Now().UnixNano() rand.Seed(seed) fmt.Println(rand.Int63()) }   But the rand.NewSource() offers thread unsafe implementation. One of the reason to choose the unsafe implementation to avoid synchronization, especially when you have only single go routine.</description>
    </item>
    
  </channel>
</rss>